using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TathamOddie.RegexAnalyzer.Logic.Tokens;

namespace TathamOddie.RegexAnalyzer.Logic.Test.Tokens
{
    [TestClass]
    public class TokenizerComplexTests
    {
        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression1()
        {
            // Arrange
            const string input = @"(?+im-s:@import\s+(?<param>url\()?(?<path>.*?)(?(param)\)|)(;|(?=\s*?$)))";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            CollectionAssert.AreEqual(new[]
                {
                    new Token(TokenType.GroupStart, "(", 0),
                    new Token(TokenType.GroupDirectiveStart, "?", 1),
                    new Token(TokenType.GroupOptionQualifier, "+", 2),
                    new Token(TokenType.GroupOption, "im", 3),
                    new Token(TokenType.GroupOptionQualifier, "-", 5),
                    new Token(TokenType.GroupOption, "s", 6),
                    new Token(TokenType.GroupOptionEnd, ":", 7),
                    new Token(TokenType.Literal, "@import", 8),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 15),
                    new Token(TokenType.CharacterEscapeData, "s", 16),
                    new Token(TokenType.Quantifier, "+", 17),
                    new Token(TokenType.GroupStart, "(", 18),
                    new Token(TokenType.GroupDirectiveStart, "?", 19),
                    new Token(TokenType.NamedIdentifierStartOrLookBehindMarker, "<", 20),
                    new Token(TokenType.Literal, "param", 21),
                    new Token(TokenType.NamedIdentifierEnd, ">", 26),
                    new Token(TokenType.Literal, @"url", 27),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 30),
                    new Token(TokenType.CharacterEscapeData, "(", 31),
                    new Token(TokenType.GroupEnd, ")", 32),
                    new Token(TokenType.Quantifier, "?", 33),
                    new Token(TokenType.GroupStart, "(", 34),
                    new Token(TokenType.GroupDirectiveStart, "?", 35),
                    new Token(TokenType.NamedIdentifierStartOrLookBehindMarker, "<", 36),
                    new Token(TokenType.Literal, "path", 37),
                    new Token(TokenType.NamedIdentifierEnd, ">", 41),
                    new Token(TokenType.AnyCharacter, ".", 42),
                    new Token(TokenType.Quantifier, "*?", 43),
                    new Token(TokenType.GroupEnd, ")", 45),
                    new Token(TokenType.GroupStart, "(", 46),
                    new Token(TokenType.GroupDirectiveStart, "?", 47),
                    new Token(TokenType.ConditionalExpressionStart, "(", 48),
                    new Token(TokenType.Literal, "param", 49),
                    new Token(TokenType.ConditionalExpressionEnd, ")", 54),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 55),
                    new Token(TokenType.CharacterEscapeData, ")", 56),
                    new Token(TokenType.OrOperator, "|", 57),
                    new Token(TokenType.GroupEnd, ")", 58),
                    new Token(TokenType.GroupStart, "(", 59),
                    new Token(TokenType.Literal, ";", 60),
                    new Token(TokenType.OrOperator, "|", 61),
                    new Token(TokenType.GroupStart, "(", 62),
                    new Token(TokenType.GroupDirectiveStart, "?", 63),
                    new Token(TokenType.PositiveLookAheadMarker, "=", 64),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 65),
                    new Token(TokenType.CharacterEscapeData, "s", 66),
                    new Token(TokenType.Quantifier, "*?", 67),
                    new Token(TokenType.EndOfStringAssertion, "$", 69),
                    new Token(TokenType.GroupEnd, ")", 70),
                    new Token(TokenType.GroupEnd, ")", 71),
                    new Token(TokenType.GroupEnd, ")", 72)
                },
                result.ToArray()
            );
        }

        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression2()
        {
            // Arrange
            const string input = @"^[\d]+([.]\d{0,2})?$";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            CollectionAssert.AreEqual(new[]
                {
                    new Token(TokenType.StartOfStringAssertion, "^", 0),
                    new Token(TokenType.CharacterSetStart, "[", 1),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 2),
                    new Token(TokenType.CharacterEscapeData, "d", 3),
                    new Token(TokenType.CharacterSetEnd, "]", 4),
                    new Token(TokenType.Quantifier, "+", 5),
                    new Token(TokenType.GroupStart, "(", 6),
                    new Token(TokenType.CharacterSetStart, "[", 7),
                    new Token(TokenType.Character, ".", 8),
                    new Token(TokenType.CharacterSetEnd, "]", 9),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 10),
                    new Token(TokenType.CharacterEscapeData, "d", 11),
                    new Token(TokenType.ParametizedQuantifierStart, "{", 12),
                    new Token(TokenType.Number, "0", 13),
                    new Token(TokenType.ParametizedQuantifierRangeSeparator, ",", 14),
                    new Token(TokenType.Number, "2", 15),
                    new Token(TokenType.ParametizedQuantifierEnd, @"}", 16),
                    new Token(TokenType.GroupEnd, ")", 17),
                    new Token(TokenType.Quantifier, "?", 18),
                    new Token(TokenType.EndOfStringAssertion, "$", 19)
                },
                result.ToArray()
            );
        }

        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression3()
        {
            // Arrange
            const string input = @"(?ni:^[\w\d]*?(?=\d*$))";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            CollectionAssert.AreEqual(new[]
                {
                    new Token(TokenType.GroupStart, "(", 0),
                    new Token(TokenType.GroupDirectiveStart, "?", 1),
                    new Token(TokenType.GroupOption, "ni", 2),
                    new Token(TokenType.GroupOptionEnd, ":", 4),
                    new Token(TokenType.StartOfStringAssertion, "^", 5),
                    new Token(TokenType.CharacterSetStart, "[", 6),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 7),
                    new Token(TokenType.CharacterEscapeData, "w", 8),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 9),
                    new Token(TokenType.CharacterEscapeData, "d", 10),
                    new Token(TokenType.CharacterSetEnd, "]", 11),
                    new Token(TokenType.Quantifier, "*?", 12),
                    new Token(TokenType.GroupStart, "(", 14),
                    new Token(TokenType.GroupDirectiveStart, "?", 15),
                    new Token(TokenType.PositiveLookAheadMarker, "=", 16),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 17),
                    new Token(TokenType.CharacterEscapeData, "d", 18),
                    new Token(TokenType.Quantifier, "*", 19),
                    new Token(TokenType.EndOfStringAssertion, "$", 20),
                    new Token(TokenType.GroupEnd, ")", 21),
                    new Token(TokenType.GroupEnd, ")", 22)
                },
                result.ToArray()
            );
        }

        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression4()
        {
            // Arrange
            const string input = @"^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            CollectionAssert.AreEqual(new[]
                {
                    new Token(TokenType.StartOfStringAssertion, "^", 0),
                    new Token(TokenType.CharacterSetStart, "[", 1),
                    new Token(TokenType.Character, "_", 2),
                    new Token(TokenType.Character, "a", 3),
                    new Token(TokenType.CharacterRangeSeparator, "-", 4),
                    new Token(TokenType.Character, "z", 5),
                    new Token(TokenType.Character, "A", 6),
                    new Token(TokenType.CharacterRangeSeparator, "-", 7),
                    new Token(TokenType.Character, "Z", 8),
                    new Token(TokenType.Character, "0", 9),
                    new Token(TokenType.CharacterRangeSeparator, "-", 10),
                    new Token(TokenType.Character, "9", 11),
                    new Token(TokenType.CharacterRangeSeparator, "-", 12),
                    new Token(TokenType.CharacterSetEnd, "]", 13),
                    new Token(TokenType.Quantifier, "+", 14),
                    new Token(TokenType.GroupStart, "(", 15),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 16),
                    new Token(TokenType.CharacterEscapeData, ".", 17),
                    new Token(TokenType.CharacterSetStart, "[", 18),
                    new Token(TokenType.Character, "_", 19),
                    new Token(TokenType.Character, "a", 20),
                    new Token(TokenType.CharacterRangeSeparator, "-", 21),
                    new Token(TokenType.Character, "z", 22),
                    new Token(TokenType.Character, "A", 23),
                    new Token(TokenType.CharacterRangeSeparator, "-", 24),
                    new Token(TokenType.Character, "Z", 25),
                    new Token(TokenType.Character, "0", 26),
                    new Token(TokenType.CharacterRangeSeparator, "-", 27),
                    new Token(TokenType.Character, "9", 28),
                    new Token(TokenType.CharacterRangeSeparator, "-", 29),
                    new Token(TokenType.CharacterSetEnd, "]", 30),
                    new Token(TokenType.Quantifier, "+", 31),
                    new Token(TokenType.GroupEnd, ")", 32),
                    new Token(TokenType.Quantifier, "*", 33),
                    new Token(TokenType.Literal, "@", 34),
                    new Token(TokenType.CharacterSetStart, "[", 35),
                    new Token(TokenType.Character, "a", 36),
                    new Token(TokenType.CharacterRangeSeparator, "-", 37),
                    new Token(TokenType.Character, "z", 38),
                    new Token(TokenType.Character, "A", 39),
                    new Token(TokenType.CharacterRangeSeparator, "-", 40),
                    new Token(TokenType.Character, "Z", 41),
                    new Token(TokenType.Character, "0", 42),
                    new Token(TokenType.CharacterRangeSeparator, "-", 43),
                    new Token(TokenType.Character, "9", 44),
                    new Token(TokenType.CharacterRangeSeparator, "-", 45),
                    new Token(TokenType.CharacterSetEnd, "]", 46),
                    new Token(TokenType.Quantifier, "+", 47),
                    new Token(TokenType.GroupStart, "(", 48),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 49),
                    new Token(TokenType.CharacterEscapeData, ".", 50),
                    new Token(TokenType.CharacterSetStart, "[", 51),
                    new Token(TokenType.Character, "a", 52),
                    new Token(TokenType.CharacterRangeSeparator, "-", 53),
                    new Token(TokenType.Character, "z", 54),
                    new Token(TokenType.Character, "A", 55),
                    new Token(TokenType.CharacterRangeSeparator, "-", 56),
                    new Token(TokenType.Character, "Z", 57),
                    new Token(TokenType.Character, "0", 58),
                    new Token(TokenType.CharacterRangeSeparator, "-", 59),
                    new Token(TokenType.Character, "9", 60),
                    new Token(TokenType.CharacterRangeSeparator, "-", 61),
                    new Token(TokenType.CharacterSetEnd, "]", 62),
                    new Token(TokenType.Quantifier, "+", 63),
                    new Token(TokenType.GroupEnd, ")", 64),
                    new Token(TokenType.Quantifier, "*", 65),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 66),
                    new Token(TokenType.CharacterEscapeData, ".", 67),
                    new Token(TokenType.GroupStart, "(", 68),
                    new Token(TokenType.GroupStart, "(", 69),
                    new Token(TokenType.CharacterSetStart, "[", 70),
                    new Token(TokenType.Character, "0", 71),
                    new Token(TokenType.CharacterRangeSeparator, "-", 72),
                    new Token(TokenType.Character, "9", 73),
                    new Token(TokenType.CharacterSetEnd, "]", 74),
                    new Token(TokenType.ParametizedQuantifierStart, "{", 75),
                    new Token(TokenType.Number, "1", 76),
                    new Token(TokenType.ParametizedQuantifierRangeSeparator, ",", 77),
                    new Token(TokenType.Number, "3", 78),
                    new Token(TokenType.ParametizedQuantifierEnd, "}", 79),
                    new Token(TokenType.GroupEnd, ")", 80),
                    new Token(TokenType.OrOperator, "|", 81),
                    new Token(TokenType.GroupStart, "(", 82),
                    new Token(TokenType.CharacterSetStart, "[", 83),
                    new Token(TokenType.Character, "a", 84),
                    new Token(TokenType.CharacterRangeSeparator, "-", 85),
                    new Token(TokenType.Character, "z", 86),
                    new Token(TokenType.Character, "A", 87),
                    new Token(TokenType.CharacterRangeSeparator, "-", 88),
                    new Token(TokenType.Character, "Z", 89),
                    new Token(TokenType.CharacterSetEnd, "]", 90),
                    new Token(TokenType.ParametizedQuantifierStart, "{", 91),
                    new Token(TokenType.Number, "2", 92),
                    new Token(TokenType.ParametizedQuantifierRangeSeparator, ",", 93),
                    new Token(TokenType.Number, "3", 94),
                    new Token(TokenType.ParametizedQuantifierEnd, "}", 95),
                    new Token(TokenType.GroupEnd, ")", 96),
                    new Token(TokenType.OrOperator, "|", 97),
                    new Token(TokenType.GroupStart, "(", 98),
                    new Token(TokenType.Literal, "aero", 99),
                    new Token(TokenType.OrOperator, "|", 103),
                    new Token(TokenType.Literal, "coop", 104),
                    new Token(TokenType.OrOperator, "|", 108),
                    new Token(TokenType.Literal, "info", 109),
                    new Token(TokenType.OrOperator, "|", 113),
                    new Token(TokenType.Literal, "museum", 114),
                    new Token(TokenType.OrOperator, "|", 120),
                    new Token(TokenType.Literal, "name", 121),
                    new Token(TokenType.GroupEnd, ")", 125),
                    new Token(TokenType.GroupEnd, ")", 126),
                    new Token(TokenType.EndOfStringAssertion, "$", 127)
                },
                result.ToArray()
            );
        }

        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression5()
        {
            // Arrange
            const string input = @"([^\\]|\\[\da-fA-F]{2}){0,32}";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            CollectionAssert.AreEqual(new[]
                {
                    new Token(TokenType.GroupStart, "(", 0),
                    new Token(TokenType.CharacterSetStart, "[", 1),
                    new Token(TokenType.NegativeCharacterSetModifier, "^", 2),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 3),
                    new Token(TokenType.CharacterEscapeData, @"\", 4),
                    new Token(TokenType.CharacterSetEnd, "]", 5),
                    new Token(TokenType.OrOperator, "|", 6),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 7),
                    new Token(TokenType.CharacterEscapeData, @"\", 8),
                    new Token(TokenType.CharacterSetStart, "[", 9),
                    new Token(TokenType.CharacterEscapeMarker, @"\", 10),
                    new Token(TokenType.CharacterEscapeData, "d", 11),
                    new Token(TokenType.Character, "a", 12),
                    new Token(TokenType.CharacterRangeSeparator, "-", 13),
                    new Token(TokenType.Character, "f", 14),
                    new Token(TokenType.Character, "A", 15),
                    new Token(TokenType.CharacterRangeSeparator, "-", 16),
                    new Token(TokenType.Character, "F", 17),
                    new Token(TokenType.CharacterSetEnd, "]", 18),
                    new Token(TokenType.ParametizedQuantifierStart, "{", 19),
                    new Token(TokenType.Number, "2", 20),
                    new Token(TokenType.ParametizedQuantifierEnd, "}", 21),
                    new Token(TokenType.GroupEnd, ")", 22),
                    new Token(TokenType.ParametizedQuantifierStart, "{", 23),
                    new Token(TokenType.Number, "0", 24),
                    new Token(TokenType.ParametizedQuantifierRangeSeparator, ",", 25),
                    new Token(TokenType.Number, "32", 26),
                    new Token(TokenType.ParametizedQuantifierEnd, "}", 28)
                },
                result.ToArray()
            );
        }

        [TestMethod]
        public void Tokenizer_Tokenize_ShouldTokenizeComplexExpression6()
        {
            // Arrange
            const string input = @"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])";

            // Act
            var result = Tokenizer.Tokenize(input);

            // Assert
            var expected = new[]
            {
                new Token(TokenType.GroupStart, "(", 0),
                new Token(TokenType.GroupDirectiveStart, "?", 1),
                new Token(TokenType.NonCapturingGroupMarker, ":", 2),
                new Token(TokenType.CharacterSetStart, "[", 3),
                new Token(TokenType.Character, "a", 4),
                new Token(TokenType.CharacterRangeSeparator, "-", 5),
                new Token(TokenType.Character, "z", 6),
                new Token(TokenType.Character, "0", 7),
                new Token(TokenType.CharacterRangeSeparator, "-", 8),
                new Token(TokenType.Character, "9", 9),
                new Token(TokenType.Character, "!", 10),
                new Token(TokenType.Character, "#", 11),
                new Token(TokenType.Character, "$", 12),
                new Token(TokenType.Character, "%", 13),
                new Token(TokenType.Character, "&", 14),
                new Token(TokenType.Character, "'", 15),
                new Token(TokenType.Character, "*", 16),
                new Token(TokenType.Character, "+", 17),
                new Token(TokenType.Character, "/", 18),
                new Token(TokenType.Character, "=", 19),
                new Token(TokenType.Character, "?", 20),
                new Token(TokenType.Character, "^", 21),
                new Token(TokenType.Character, "_", 22),
                new Token(TokenType.Character, "`", 23),
                new Token(TokenType.Character, "{", 24),
                new Token(TokenType.Character, "|", 25),
                new Token(TokenType.Character, "}", 26),
                new Token(TokenType.Character, "~", 27),
                new Token(TokenType.CharacterRangeSeparator, "-", 28),
                new Token(TokenType.CharacterSetEnd, "]", 29),
                new Token(TokenType.Quantifier, "+", 30),
                new Token(TokenType.GroupStart, "(", 31),
                new Token(TokenType.GroupDirectiveStart, "?", 32),
                new Token(TokenType.NonCapturingGroupMarker, ":", 33),
                new Token(TokenType.CharacterEscapeMarker, @"\", 34),
                new Token(TokenType.CharacterEscapeData, ".", 35),
                new Token(TokenType.CharacterSetStart, "[", 36),
                new Token(TokenType.Character, "a", 37),
                new Token(TokenType.CharacterRangeSeparator, "-", 38),
                new Token(TokenType.Character, "z", 39),
                new Token(TokenType.Character, "0", 40),
                new Token(TokenType.CharacterRangeSeparator, "-", 41),
                new Token(TokenType.Character, "9", 42),
                new Token(TokenType.Character, "!", 43),
                new Token(TokenType.Character, "#", 44),
                new Token(TokenType.Character, "$", 45),
                new Token(TokenType.Character, "%", 46),
                new Token(TokenType.Character, "&", 47),
                new Token(TokenType.Character, "'", 48),
                new Token(TokenType.Character, "*", 49),
                new Token(TokenType.Character, "+", 50),
                new Token(TokenType.Character, "/", 51),
                new Token(TokenType.Character, "=", 52),
                new Token(TokenType.Character, "?", 53),
                new Token(TokenType.Character, "^", 54),
                new Token(TokenType.Character, "_", 55),
                new Token(TokenType.Character, "`", 56),
                new Token(TokenType.Character, "{", 57),
                new Token(TokenType.Character, "|", 58),
                new Token(TokenType.Character, "}", 59),
                new Token(TokenType.Character, "~", 60),
                new Token(TokenType.CharacterRangeSeparator, "-", 61),
                new Token(TokenType.CharacterSetEnd, "]", 62),
                new Token(TokenType.Quantifier, "+", 63),
                new Token(TokenType.GroupEnd, ")", 64),
                new Token(TokenType.Quantifier, "*", 65),
                new Token(TokenType.OrOperator, "|", 66),
                new Token(TokenType.Literal, "\"", 67),
                new Token(TokenType.GroupStart, "(", 68),
                new Token(TokenType.GroupDirectiveStart, "?", 69),
                new Token(TokenType.NonCapturingGroupMarker, ":", 70),
                new Token(TokenType.CharacterSetStart, "[", 71),
                new Token(TokenType.CharacterEscapeMarker, @"\", 72),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 73),
                new Token(TokenType.CharacterEscapeData, "01", 74),
                new Token(TokenType.CharacterRangeSeparator, "-", 76),
                new Token(TokenType.CharacterEscapeMarker, @"\", 77),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 78),
                new Token(TokenType.CharacterEscapeData, "08", 79),
                new Token(TokenType.CharacterEscapeMarker, @"\", 81),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 82),
                new Token(TokenType.CharacterEscapeData, "0b", 83),
                new Token(TokenType.CharacterEscapeMarker, @"\", 85),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 86),
                new Token(TokenType.CharacterEscapeData, "0c", 87),
                new Token(TokenType.CharacterEscapeMarker, @"\", 89),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 90),
                new Token(TokenType.CharacterEscapeData, "0e", 91),
                new Token(TokenType.CharacterRangeSeparator, "-", 93),
                new Token(TokenType.CharacterEscapeMarker, @"\", 94),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 95),
                new Token(TokenType.CharacterEscapeData, "1f", 96),
                new Token(TokenType.CharacterEscapeMarker, @"\", 98),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 99),
                new Token(TokenType.CharacterEscapeData, "21", 100),
                new Token(TokenType.CharacterEscapeMarker, @"\", 102),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 103),
                new Token(TokenType.CharacterEscapeData, "23", 104),
                new Token(TokenType.CharacterRangeSeparator, "-", 106),
                new Token(TokenType.CharacterEscapeMarker, @"\", 107),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 108),
                new Token(TokenType.CharacterEscapeData, "5b", 109),
                new Token(TokenType.CharacterEscapeMarker, @"\", 111),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 112),
                new Token(TokenType.CharacterEscapeData, "5d", 113),
                new Token(TokenType.CharacterRangeSeparator, "-", 115),
                new Token(TokenType.CharacterEscapeMarker, @"\", 116),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 117),
                new Token(TokenType.CharacterEscapeData, "7f", 118),
                new Token(TokenType.CharacterSetEnd, "]", 120),
                new Token(TokenType.OrOperator, "|", 121),
                new Token(TokenType.CharacterEscapeMarker, @"\", 122),
                new Token(TokenType.CharacterEscapeData, @"\", 123),
                new Token(TokenType.CharacterSetStart, "[", 124),
                new Token(TokenType.CharacterEscapeMarker, @"\", 125),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 126),
                new Token(TokenType.CharacterEscapeData, "01", 127),
                new Token(TokenType.CharacterRangeSeparator, "-", 129),
                new Token(TokenType.CharacterEscapeMarker, @"\", 130),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 131),
                new Token(TokenType.CharacterEscapeData, "09", 132),
                new Token(TokenType.CharacterEscapeMarker, @"\", 134),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 135),
                new Token(TokenType.CharacterEscapeData, "0b", 136),
                new Token(TokenType.CharacterEscapeMarker, @"\", 138),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 139),
                new Token(TokenType.CharacterEscapeData, "0c", 140),
                new Token(TokenType.CharacterEscapeMarker, @"\", 142),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 143),
                new Token(TokenType.CharacterEscapeData, "0e", 144),
                new Token(TokenType.CharacterRangeSeparator, "-", 146),
                new Token(TokenType.CharacterEscapeMarker, @"\", 147),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 148),
                new Token(TokenType.CharacterEscapeData, "7f", 149),
                new Token(TokenType.CharacterSetEnd, "]", 151),
                new Token(TokenType.GroupEnd, ")", 152),
                new Token(TokenType.Quantifier, "*", 153),
                new Token(TokenType.Literal, "\"", 154),
                new Token(TokenType.GroupEnd, ")", 155),
                new Token(TokenType.Literal, "@", 156),
                new Token(TokenType.GroupStart, "(", 157),
                new Token(TokenType.GroupDirectiveStart, "?", 158),
                new Token(TokenType.NonCapturingGroupMarker, ":", 159),
                new Token(TokenType.GroupStart, "(", 160),
                new Token(TokenType.GroupDirectiveStart, "?", 161),
                new Token(TokenType.NonCapturingGroupMarker, ":", 162),
                new Token(TokenType.CharacterSetStart, "[", 163),
                new Token(TokenType.Character, "a", 164),
                new Token(TokenType.CharacterRangeSeparator, "-", 165),
                new Token(TokenType.Character, "z", 166),
                new Token(TokenType.Character, "0", 167),
                new Token(TokenType.CharacterRangeSeparator, "-", 168),
                new Token(TokenType.Character, "9", 169),
                new Token(TokenType.CharacterSetEnd, "]", 170),
                new Token(TokenType.GroupStart, "(", 171),
                new Token(TokenType.GroupDirectiveStart, "?", 172),
                new Token(TokenType.NonCapturingGroupMarker, ":", 173),
                new Token(TokenType.CharacterSetStart, "[", 174),
                new Token(TokenType.Character, "a", 175),
                new Token(TokenType.CharacterRangeSeparator, "-", 176),
                new Token(TokenType.Character, "z", 177),
                new Token(TokenType.Character, "0", 178),
                new Token(TokenType.CharacterRangeSeparator, "-", 179),
                new Token(TokenType.Character, "9", 180),
                new Token(TokenType.CharacterRangeSeparator, "-", 181),
                new Token(TokenType.CharacterSetEnd, "]", 182),
                new Token(TokenType.Quantifier, "*", 183),
                new Token(TokenType.CharacterSetStart, "[", 184),
                new Token(TokenType.Character, "a", 185),
                new Token(TokenType.CharacterRangeSeparator, "-", 186),
                new Token(TokenType.Character, "z", 187),
                new Token(TokenType.Character, "0", 188),
                new Token(TokenType.CharacterRangeSeparator, "-", 189),
                new Token(TokenType.Character, "9", 190),
                new Token(TokenType.CharacterSetEnd, "]", 191),
                new Token(TokenType.GroupEnd, ")", 192),
                new Token(TokenType.Quantifier, "?", 193),
                new Token(TokenType.CharacterEscapeMarker, @"\", 194),
                new Token(TokenType.CharacterEscapeData, ".", 195),
                new Token(TokenType.GroupEnd, ")", 196),
                new Token(TokenType.Quantifier, "+", 197),
                new Token(TokenType.CharacterSetStart, "[", 198),
                new Token(TokenType.Character, "a", 199),
                new Token(TokenType.CharacterRangeSeparator, "-", 200),
                new Token(TokenType.Character, "z", 201),
                new Token(TokenType.Character, "0", 202),
                new Token(TokenType.CharacterRangeSeparator, "-", 203),
                new Token(TokenType.Character, "9", 204),
                new Token(TokenType.CharacterSetEnd, "]", 205),
                new Token(TokenType.GroupStart, "(", 206),
                new Token(TokenType.GroupDirectiveStart, "?", 207),
                new Token(TokenType.NonCapturingGroupMarker, ":", 208),
                new Token(TokenType.CharacterSetStart, "[", 209),
                new Token(TokenType.Character, "a", 210),
                new Token(TokenType.CharacterRangeSeparator, "-", 211),
                new Token(TokenType.Character, "z", 212),
                new Token(TokenType.Character, "0", 213),
                new Token(TokenType.CharacterRangeSeparator, "-", 214),
                new Token(TokenType.Character, "9", 215),
                new Token(TokenType.CharacterRangeSeparator, "-", 216),
                new Token(TokenType.CharacterSetEnd, "]", 217),
                new Token(TokenType.Quantifier, "*", 218),
                new Token(TokenType.CharacterSetStart, "[", 219),
                new Token(TokenType.Character, "a", 220),
                new Token(TokenType.CharacterRangeSeparator, "-", 221),
                new Token(TokenType.Character, "z", 222),
                new Token(TokenType.Character, "0", 223),
                new Token(TokenType.CharacterRangeSeparator, "-", 224),
                new Token(TokenType.Character, "9", 225),
                new Token(TokenType.CharacterSetEnd, "]", 226),
                new Token(TokenType.GroupEnd, ")", 227),
                new Token(TokenType.Quantifier, "?", 228),
                new Token(TokenType.OrOperator, "|", 229),
                new Token(TokenType.CharacterEscapeMarker, @"\", 230),
                new Token(TokenType.CharacterEscapeData, "[", 231),
                new Token(TokenType.GroupStart, "(", 232),
                new Token(TokenType.GroupDirectiveStart, "?", 233),
                new Token(TokenType.NonCapturingGroupMarker, ":", 234),
                new Token(TokenType.GroupStart, "(", 235),
                new Token(TokenType.GroupDirectiveStart, "?", 236),
                new Token(TokenType.NonCapturingGroupMarker, ":", 237),
                new Token(TokenType.Literal, "25", 238),
                new Token(TokenType.CharacterSetStart, "[", 240),
                new Token(TokenType.Character, "0", 241),
                new Token(TokenType.CharacterRangeSeparator, "-", 242),
                new Token(TokenType.Character, "5", 243),
                new Token(TokenType.CharacterSetEnd, "]", 244),
                new Token(TokenType.OrOperator, "|", 245),
                new Token(TokenType.Literal, "2", 246),
                new Token(TokenType.CharacterSetStart, "[", 247),
                new Token(TokenType.Character, "0", 248),
                new Token(TokenType.CharacterRangeSeparator, "-", 249),
                new Token(TokenType.Character, "4", 250),
                new Token(TokenType.CharacterSetEnd, "]", 251),
                new Token(TokenType.CharacterSetStart, "[", 252),
                new Token(TokenType.Character, "0", 253),
                new Token(TokenType.CharacterRangeSeparator, "-", 254),
                new Token(TokenType.Character, "9", 255),
                new Token(TokenType.CharacterSetEnd, "]", 256),
                new Token(TokenType.OrOperator, "|", 257),
                new Token(TokenType.CharacterSetStart, "[", 258),
                new Token(TokenType.Character, "0", 259),
                new Token(TokenType.Character, "1", 260),
                new Token(TokenType.CharacterSetEnd, "]", 261),
                new Token(TokenType.Quantifier, "?", 262),
                new Token(TokenType.CharacterSetStart, "[", 263),
                new Token(TokenType.Character, "0", 264),
                new Token(TokenType.CharacterRangeSeparator, "-", 265),
                new Token(TokenType.Character, "9", 266),
                new Token(TokenType.CharacterSetEnd, "]", 267),
                new Token(TokenType.CharacterSetStart, "[", 268),
                new Token(TokenType.Character, "0", 269),
                new Token(TokenType.CharacterRangeSeparator, "-", 270),
                new Token(TokenType.Character, "9", 271),
                new Token(TokenType.CharacterSetEnd, "]", 272),
                new Token(TokenType.Quantifier, "?", 273),
                new Token(TokenType.GroupEnd, ")", 274),
                new Token(TokenType.CharacterEscapeMarker, @"\", 275),
                new Token(TokenType.CharacterEscapeData, ".", 276),
                new Token(TokenType.GroupEnd, ")", 277),
                new Token(TokenType.ParametizedQuantifierStart, "{", 278),
                new Token(TokenType.Number, "3", 279),
                new Token(TokenType.ParametizedQuantifierEnd, "}", 280),
                new Token(TokenType.GroupStart, "(", 281),
                new Token(TokenType.GroupDirectiveStart, "?", 282),
                new Token(TokenType.NonCapturingGroupMarker, ":", 283),
                new Token(TokenType.Literal, "25", 284),
                new Token(TokenType.CharacterSetStart, "[", 286),
                new Token(TokenType.Character, "0", 287),
                new Token(TokenType.CharacterRangeSeparator, "-", 288),
                new Token(TokenType.Character, "5", 289),
                new Token(TokenType.CharacterSetEnd, "]", 290),
                new Token(TokenType.OrOperator, "|", 291),
                new Token(TokenType.Literal, "2", 292),
                new Token(TokenType.CharacterSetStart, "[", 293),
                new Token(TokenType.Character, "0", 294),
                new Token(TokenType.CharacterRangeSeparator, "-", 295),
                new Token(TokenType.Character, "4", 296),
                new Token(TokenType.CharacterSetEnd, "]", 297),
                new Token(TokenType.CharacterSetStart, "[", 298),
                new Token(TokenType.Character, "0", 299),
                new Token(TokenType.CharacterRangeSeparator, "-", 300),
                new Token(TokenType.Character, "9", 301),
                new Token(TokenType.CharacterSetEnd, "]", 302),
                new Token(TokenType.OrOperator, "|", 303),
                new Token(TokenType.CharacterSetStart, "[", 304),
                new Token(TokenType.Character, "0", 305),
                new Token(TokenType.Character, "1", 306),
                new Token(TokenType.CharacterSetEnd, "]", 307),
                new Token(TokenType.Quantifier, "?", 308),
                new Token(TokenType.CharacterSetStart, "[", 309),
                new Token(TokenType.Character, "0", 310),
                new Token(TokenType.CharacterRangeSeparator, "-", 311),
                new Token(TokenType.Character, "9", 312),
                new Token(TokenType.CharacterSetEnd, "]", 313),
                new Token(TokenType.CharacterSetStart, "[", 314),
                new Token(TokenType.Character, "0", 315),
                new Token(TokenType.CharacterRangeSeparator, "-", 316),
                new Token(TokenType.Character, "9", 317),
                new Token(TokenType.CharacterSetEnd, "]", 318),
                new Token(TokenType.Quantifier, "?", 319),
                new Token(TokenType.OrOperator, "|", 320),
                new Token(TokenType.CharacterSetStart, "[", 321),
                new Token(TokenType.Character, "a", 322),
                new Token(TokenType.CharacterRangeSeparator, "-", 323),
                new Token(TokenType.Character, "z", 324),
                new Token(TokenType.Character, "0", 325),
                new Token(TokenType.CharacterRangeSeparator, "-", 326),
                new Token(TokenType.Character, "9", 327),
                new Token(TokenType.CharacterRangeSeparator, "-", 328),
                new Token(TokenType.CharacterSetEnd, "]", 329),
                new Token(TokenType.Quantifier, "*", 330),
                new Token(TokenType.CharacterSetStart, "[", 331),
                new Token(TokenType.Character, "a", 332),
                new Token(TokenType.CharacterRangeSeparator, "-", 333),
                new Token(TokenType.Character, "z", 334),
                new Token(TokenType.Character, "0", 335),
                new Token(TokenType.CharacterRangeSeparator, "-", 336),
                new Token(TokenType.Character, "9", 337),
                new Token(TokenType.CharacterSetEnd, "]", 338),
                new Token(TokenType.Literal, ":", 339),
                new Token(TokenType.GroupStart, "(", 340),
                new Token(TokenType.GroupDirectiveStart, "?", 341),
                new Token(TokenType.NonCapturingGroupMarker, ":", 342),
                new Token(TokenType.CharacterSetStart, "[", 343),
                new Token(TokenType.CharacterEscapeMarker, @"\", 344),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 345),
                new Token(TokenType.CharacterEscapeData, "01", 346),
                new Token(TokenType.CharacterRangeSeparator, "-", 348),
                new Token(TokenType.CharacterEscapeMarker, @"\", 349),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 350),
                new Token(TokenType.CharacterEscapeData, "08", 351),
                new Token(TokenType.CharacterEscapeMarker, @"\", 353),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 354),
                new Token(TokenType.CharacterEscapeData, "0b", 355),
                new Token(TokenType.CharacterEscapeMarker, @"\", 357),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 358),
                new Token(TokenType.CharacterEscapeData, "0c", 359),
                new Token(TokenType.CharacterEscapeMarker, @"\", 361),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 362),
                new Token(TokenType.CharacterEscapeData, "0e", 363),
                new Token(TokenType.CharacterRangeSeparator, "-", 365),
                new Token(TokenType.CharacterEscapeMarker, @"\", 366),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 367),
                new Token(TokenType.CharacterEscapeData, "1f", 368),
                new Token(TokenType.CharacterEscapeMarker, @"\", 370),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 371),
                new Token(TokenType.CharacterEscapeData, "21", 372),
                new Token(TokenType.CharacterRangeSeparator, "-", 374),
                new Token(TokenType.CharacterEscapeMarker, @"\", 375),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 376),
                new Token(TokenType.CharacterEscapeData, "5a", 377),
                new Token(TokenType.CharacterEscapeMarker, @"\", 379),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 380),
                new Token(TokenType.CharacterEscapeData, "53", 381),
                new Token(TokenType.CharacterRangeSeparator, "-", 383),
                new Token(TokenType.CharacterEscapeMarker, @"\", 384),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 385),
                new Token(TokenType.CharacterEscapeData, "7f", 386),
                new Token(TokenType.CharacterSetEnd, "]", 388),
                new Token(TokenType.OrOperator, "|", 389),
                new Token(TokenType.CharacterEscapeMarker, @"\", 390),
                new Token(TokenType.CharacterEscapeData, @"\", 391),
                new Token(TokenType.CharacterSetStart, "[", 392),
                new Token(TokenType.CharacterEscapeMarker, @"\", 393),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 394),
                new Token(TokenType.CharacterEscapeData, "01", 395),
                new Token(TokenType.CharacterRangeSeparator, "-", 397),
                new Token(TokenType.CharacterEscapeMarker, @"\", 398),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 399),
                new Token(TokenType.CharacterEscapeData, "09", 400),
                new Token(TokenType.CharacterEscapeMarker, @"\", 402),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 403),
                new Token(TokenType.CharacterEscapeData, "0b", 404),
                new Token(TokenType.CharacterEscapeMarker, @"\", 406),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 407),
                new Token(TokenType.CharacterEscapeData, "0c", 408),
                new Token(TokenType.CharacterEscapeMarker, @"\", 410),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 411),
                new Token(TokenType.CharacterEscapeData, "0e", 412),
                new Token(TokenType.CharacterRangeSeparator, "-", 414),
                new Token(TokenType.CharacterEscapeMarker, @"\", 415),
                new Token(TokenType.CharacterEscapeHexMarker, "x", 416),
                new Token(TokenType.CharacterEscapeData, "7f", 417),
                new Token(TokenType.CharacterSetEnd, "]", 419),
                new Token(TokenType.GroupEnd, ")", 420),
                new Token(TokenType.Quantifier, "+", 421),
                new Token(TokenType.GroupEnd, ")", 422),
                new Token(TokenType.CharacterEscapeMarker, @"\", 423),
                new Token(TokenType.CharacterEscapeData, "]", 424),
                new Token(TokenType.GroupEnd, ")", 425),
            };

            CollectionAssert.AreEqual(
                expected,
                result.ToArray()
            );
        }
    }
}