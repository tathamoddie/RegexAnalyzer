@inherits System.Web.Mvc.WebViewPage<dynamic>

<h2>We started with this expression:</h2>
<code class="code-block">@View.ExpressionMarkup</code>

<h2>First up, we broke it into these tokens:</h2>
<table title="Expression tokens">
    <thead>
        <tr>
            <th>Token Type</th>
            <th>Index</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var token in View.Tokens) {
            <tr>
                <td>@token.Type</td>
                <td>@token.StartIndex.ToString("#,##0")</td>
                <td><code>@token.Data</code></td>
            </tr>
        }
    </tbody>
</table>

<h2>Using the tokens, we built this <abbr title="abstract syntax tree">AST</abbr>:</h2>
<table title="Expression tokens">
    <thead>
        <tr>
            <th>Node Id</th>
            <th>Node Type</th>
            <th>Depth</th>
            <th>Index</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var node in View.AllNodes) {
            <tr class="@node.CssClass">
                <td>@node.NodeId</td>
                <td>@node.TypeName</td>
                <td>@node.Depth</td>
                <td>@node.StartIndex</td>
                <td><code>@node.Data</code></td>
            </tr>
        }
    </tbody>
</table>

<h2>Just for you, we made the <abbr title="abstract syntax tree">AST</abbr> look pretty:</h2>
@View.NodesMarkup

<h2>We identified these nodes as variables:</h2>

<h2>We generated this <em>partial</em> set of variable permutations:</h2>

<h2>Using the variables, we generated these <em>potential</em> matches:</h2>

<h2>
    We tested each of these potential matches against the original expression.
    These ones passed (xx%):
</h2>

<h2>All of that took us @View.TimeTaken.TotalSeconds.ToString("#,##0.00000000") seconds. Your move.</h2>