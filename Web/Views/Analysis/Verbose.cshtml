@inherits System.Web.Mvc.WebViewPage<dynamic>
@{
    LayoutPage = "~/Views/Shared/_Layout.cshtml";
}

<h2>We started with this expression:</h2>
<code class="code-block">@View.Expression</code>

<h2>First up, we broke it into these tokens:</h2>
<table title="Expression tokens">
    <thead>
        <tr>
            <th>Token Type</th>
            <th>Index</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var token in View.Tokens) {
            <tr>
                <td>@token.Type</td>
                <td>@token.StartIndex.ToString("#,##0")</td>
                <td><code>@token.Data</code></td>
            </tr>
        }
    </tbody>
</table>

<h2>Using the tokens, we built this <acronym title="abstract syntax tree">AST</acronym>:</h2>
<ol class="ast">
    @View.NodesMarkup
</ol>

<!--
Just for you, we made the AST look pretty:
We idenitified these nodes as variables:
We generated this (partial) set of variable permutations:
Using the variables, we generated these /potential/ matches:
We tested each of these potential matches against the original expression.
These ones passed (x%):-->

<h2>All of that took us @View.TimeTaken.TotalSeconds.ToString("#,##0.00000000") seconds. Your move.</h2>